@import "./variables";

// Applies the correct theme color style to the specified property.
// $property is typically color or background-color, but can be any CSS property that accepts color values.
// $style should be one of the map keys in $theme-property-values (_variables.scss), or a literal color value.
// $edgeOptOut controls whether to feature-detect around Edge to avoid emitting CSS variables for it,
// intended for use in cases where interactions with pseudo-element styles cause problems due to Edge bugs.

@mixin theme-prop($property, $style, $important: false, $edgeOptOut: false) {
	@if type-of($style) == "color" {
		@if $important {
			#{$property}: $style !important;
		} @else {
			#{$property}: $style;
		}
	} @else {
		@if not map-has-key($theme-property-values, $style) {
			@error "Invalid style: '#{$style}'. Choose one of: #{map-keys($theme-property-values)}";
		}
		$value: map-get($theme-property-values, $style);
		@if $important {
			/* @alternate */
			#{$property}: $value !important;
			@if $edgeOptOut {
				// stylelint-disable max-nesting-depth
				@at-root {
					@supports not (-ms-ime-align:auto) {
						// stylelint-disable scss/selector-no-redundant-nesting-selector
						& {
							#{$property}: var(--theme-#{$style}, $value) !important;
						}
						// stylelint-enable scss/selector-no-redundant-nesting-selector
					}
				}
				// stylelint-enable max-nesting-depth
			} @else {
				#{$property}: var(--theme-#{$style}, $value) !important;
			}
		} @else {
			/* @alternate */
			#{$property}: $value;
			@if $edgeOptOut {
				// stylelint-disable max-nesting-depth
				@at-root {
					@supports not (-ms-ime-align:auto) {
						// stylelint-disable scss/selector-no-redundant-nesting-selector
						& {
							#{$property}: var(--theme-#{$style}, $value);
						}
						// stylelint-enable scss/selector-no-redundant-nesting-selector
					}
				}
				// stylelint-enable max-nesting-depth
			} @else {
				#{$property}: var(--theme-#{$style}, $value);
			}
		}
	}
}